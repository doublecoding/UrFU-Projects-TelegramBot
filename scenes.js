const Scene = require("telegraf/scenes/base");
const WizardScene = require("telegraf/scenes/wizard");
const Composer = require("telegraf/composer");
const Markup = require("telegraf/markup");
const mysql = require("mysql");

const connection = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "root",
  database: "telegraf",
});

class SceneGenerator {
  //–°—Ü–µ–Ω–∞ "–î–æ–∫—É–º–µ–Ω—Ç—ã"
  GenDocumentsScene() {
    const documents = new Scene("documents");
    documents.enter((ctx) => {
      ctx.replyWithHTML(
        `üìÑ <b>–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>` +
          "\n\nüîπ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.docx" +
          "\nüîπ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.docx" +
          "\nüîπ –ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.pdf" +
          "\nüîπ –†–µ—Ü–µ–Ω–∑–∏—è.docx" +
          "\nüîπ –¢–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç.docx" +
          "\nüîπ –£–∫–∞–∑–∞–Ω–∏—è –∫ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ.doc" +
          `\n\n‚ùóÔ∏è <b>–ö —Å–¥–∞—á–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å:</b>` +
          "\n\nüî∏ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ" +
          "\nüî∏ –û—Ç—á—ë—Ç —Å —Ç–∏—Ç—É–ª—å–Ω—ã–º –ª–∏—Å—Ç–æ–º" +
          "\nüî∏ –†–µ—Ü–µ–Ω–∑–∏—è"
      );
      ctx.replyWithDocument({ source: "./content/–î–æ–∫—É–º–µ–Ω—Ç—ã.zip" });
    });
    return documents;
  }

  //–°—Ü–µ–Ω–∞ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
  GenContactsScene() {
    const stepHandler = new Composer();

    const contacts = new WizardScene(
      "contacts",
      (ctx) => {
        ctx.reply(
          "–ß—å–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ–±–µ –Ω—É–∂–Ω—ã?",
          Markup.inlineKeyboard([
            Markup.callbackButton("–û—Ä–∞–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã", "organizers"),
            Markup.callbackButton("–ö—É—Ä–∞—Ç–æ—Ä/–ó–∞–∫–∞–∑—á–∏–∫", "clients"),
          ]).extra()
        );
        console.log(ctx.wizard.cursor);
        ctx.wizard.next();
      },
      stepHandler.on("callback_query", (ctx) => {
        ctx.wizard.state.contact_type = ctx.update.callback_query.data;
        console.log(ctx.wizard.cursor);
        console.log(ctx.wizard.state.contact_type);
        ctx.wizard.next();
      }),
      (ctx) => {
        console.log(ctx.wizard.cursor);
        if (ctx.wizard.state.contact_type == "organizers") {
          (ctx) => {
            ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:");
            ctx.wizard.state.team = ctx.message.text;
            console.log(ctx.wizard.state.wizard);
          };
          ctx.scene.leave();
        } else {
          (ctx) => {
            ctx.reply("s");
            ctx.scene.leave();
          };
        }
      }
    );
    return contacts;
  }

  //–°—Ü–µ–Ω–∞ "FAQ"
  GenFAQScene() {
    const faq = new Scene("faq");
    faq.enter((ctx) => {
      ctx.replyWithHTML(`<b>–†–∞–∑–¥–µ–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ :(</b>`);
    });
    return faq;
  }

  //–°—Ü–µ–Ω–∞ "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞—â–∏—Ç—É"
  GenDefProjectsScene() {
    const stepHandler = new Composer();

    const defprojects = new WizardScene(
      "defprojects",
      (ctx) => {
        ctx.reply(
          "1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ",
          Markup.inlineKeyboard([
            [Markup.callbackButton("application", "application")],
            [Markup.callbackButton("web", "web")],
            [Markup.callbackButton("ai/ml", "aiml")],
            [Markup.callbackButton("smm", "smm")],
          ]).extra()
        );
        ctx.wizard.next();
      },
      stepHandler.on("callback_query", (ctx) => {
        ctx.wizard.state.data = ctx.update.callback_query.data;
        ctx.wizard.next();
      }),
      (ctx) => {
        ctx.reply("2. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ");
        ctx.wizard.next();
        ctx.wizard.state.flag = true;
      },
      (ctx) => {
        ctx.reply("3. –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞—â–∏—Ç—ã (–§–æ—Ä–º–∞—Ç - 00:00)");
        ctx.wizard.next();
        if (ctx.wizard.state.flag) {
          ctx.wizard.state.team = ctx.message.text;
        }
      },
      (ctx) => {
        ctx.wizard.state.time = ctx.message.text.replace(" ", "");
        
        if (!regexp.test(ctx.wizard.state.time)) {
          ctx.reply(
            "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ üòæ,\n–≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
          );
          ctx.wizard.back();
          ctx.wizard.state.flag = false;
        }

        // dataTime = []
        // connection.query("SELECT time FROM schedule", (err, res) => {
        //   if(err) throw err

        //   res.forEach(item => {
        //     dataTime.push(
        //       item.time.replace(':00','')
        //     )
        //   })

        //   dataTime.forEach(elem => {
        //     if(elem == ctx.wizard.state.time){
        //       console.log('–û—à–∏–±–∫–∞ –µ–ø—Ç');
        //     }
        //   })
        //   console.log(dataTime)
        // })

        else {
          ctx.reply("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!");

          connection.connect(() => {
            connection.query(
              `INSERT INTO schedule (id, team, data, time) VALUES (NULL, '${ctx.wizard.state.team}', '${ctx.wizard.state.data}', '${ctx.wizard.state.time}')`
            );
            connection.query("SET SESSION wait_timeout = 604800");
          });
          ctx.scene.leave();
          console.log(ctx.wizard.state);
        }
      }
    );
    return defprojects;
  }
}

module.exports = SceneGenerator;
