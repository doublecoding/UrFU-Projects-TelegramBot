const { Telegraf } = require("telegraf");
const { Markup } = Telegraf;
const Composer = require("telegraf/composer");
const Stage = require("telegraf/stage");
const WizardScene = require("telegraf/scenes/wizard");
const mysql = require("mysql");
const { leave } = Stage;

const connection = mysql.createConnection({
  socketPath: "/var/run/mysqld/mysqld.sock",
  user: "c27887_urfu_bot_ru",
  password: "QuJnuYirwawub45",
  database: "c27887_urfu_bot_ru",
});

connection.query("SELECT * FROM `schedule`", (err, res) => console.log(err));
connection.query("SET SESSION wait_timeout = 604800");

function defprojectSceneGenerate() {
  const stepHandler = new Composer();

  const defproject = new WizardScene(
    "defproject",
    (ctx) => {
      ctx.reply(
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ",
        Markup.inlineKeyboard([
          [Markup.callbackButton("application", "application")],
          [Markup.callbackButton("web", "web")],
          [Markup.callbackButton("ai/ml", "aiml")],
          [Markup.callbackButton("smm", "smm")],
        ]).extra()
      );
      ctx.wizard.next();
    },
    stepHandler.on("callback_query", (ctx) => {
      ctx.wizard.state.data = ctx.update.callback_query.data;
      ctx.reply("2. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ");
      ctx.wizard.state.flag = true;
      ctx.wizard.next();
    }),
    (ctx) => {
      if (ctx.wizard.state.flag) {
        ctx.wizard.state.team = ctx.message.text;
      }
      connection.query(`SELECT * FROM schedule WHERE team = '${ctx.wizard.state.team}'`, (err, res) => {
        if (err) throw err;
        if (res[0] != undefined) {
          ctx.replyWithHTML("‚ùóÔ∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ—é –∑–∞–ø–∏—Å—å\n\nüîπ<b>–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ:</b>");
          ctx.scene.leave();
          return false;
        }
        else {
          ctx.replyWithHTML("3. –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞—â–∏—Ç—ã (<b>–§–æ—Ä–º–∞—Ç - 00:00</b>)\n\n‚ùóÔ∏è –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–í—ã–π—Ç–∏\", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞—â–∏—Ç—É");
          ctx.wizard.next();
        }
      });
    },
    (ctx) => {
      if (ctx.message.text.replace(" ", "").toLowerCase() == '–≤—ã–π—Ç–∏') {
        ctx.replyWithHTML("üîπ<b>–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ:</b>");
        ctx.scene.leave();
        return false;
      }
      ctx.wizard.state.time = ctx.message.text.replace(" ", "");
      const data = ctx.wizard.state.data;
      let time = ctx.wizard.state.time;
      const regexp = /\d{2}:\d{2}/;

      if (!regexp.test(ctx.wizard.state.time)) {
        ctx.replyWithHTML(
          "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ üòæ,\n\n<i>–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</i>"
        );
        ctx.wizard.selectStep(2);
        ctx.wizard.state.flag = false;
      } else {
        connection.query(
          `SELECT time FROM schedule WHERE data = '${data}'`,
          (err, res) => {
            if (res.length == 0) {
              ctx.reply("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!");

              connection.connect(() => {
                connection.query(
                  `INSERT INTO schedule (id, team, data, time) VALUES (NULL, '${ctx.wizard.state.team}', '${ctx.wizard.state.data}', '${ctx.wizard.state.time}')`
                );
              });
              ctx.scene.leave();
            } else if (res.some((elem) => elem.time == time)) {
              ctx.replyWithHTML(
                `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ üòæ\n<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–∞ 15 –º–∏–Ω—É—Ç</b>\n\n‚ùóÔ∏è –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ http://site, —á—Ç–æ –≤—ã —Ä–∞–Ω–µ–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\n<i>–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</i>`
              );
              ctx.wizard.selectStep(2);
              ctx.wizard.state.flag = false;
            } else {
              ctx.replyWithHTML("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!\n\nüîπ<b>–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ:</b>");

              connection.query(
                `INSERT INTO schedule (id, team, data, time) VALUES (NULL, '${ctx.wizard.state.team}', '${ctx.wizard.state.data}', '${ctx.wizard.state.time}')`
              );
              ctx.scene.leave();
            }
          }
        );
      }
    }
  );

  return defproject;
}

module.exports = defprojectSceneGenerate;
